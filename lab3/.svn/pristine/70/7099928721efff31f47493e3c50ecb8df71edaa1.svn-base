#include <lcom/lcf.h>
#include <keyboard.h>
#include <i8042.h>
#include <utils.h>

#include <stdint.h>

int HOOK_ID = KBC_IRQ;
uint8_t SCANCODE[2];
bool SCANCODE_2B = false; // true if it is a 2 byte scancode 
uint8_t KBC_IH; // 0 if interrupt handler executed without problems and non-zero otherwise
extern uint32_t COUNTER;

int (kbc_subscribe_int)(uint8_t *bit_no) {
  *bit_no = HOOK_ID;

  //subscribe a notification on every interrupt in the IRQ1 (interrupt request line) of the KBC

  if(sys_irqsetpolicy(KBC_IRQ, IRQ_REENABLE|IRQ_EXCLUSIVE, &HOOK_ID) != OK){
    return 1;
  }
  return 0;
}

int (kbc_unsubscribe_int()) {
  //unsubscribe a previous subscription of a specific interrupt notification (the one associated with the HOOK_ID)
  if(sys_irqrmpolicy(&HOOK_ID) != OK){
    return 1;
  }
  return 0;
}

void (kbc_ih)(){
  uint8_t scancode_byte;

  //Read status from status register
  //Check if any error occured in the serial communication line
  if(kbc_read_state_error() != 0)
    KBC_IH = 1;

  //check if OUT_BUF is full(1)
  if(kbc_read_state_field(ksf_obf) != 1) /*|| kbc_read_state_field(ksf_aux) != 0*/
     KBC_IH = 1; // nothing to read or aux
  
  //Read the scancode byte from the output buffer - one byte at a time
  if(util_sys_inb(OUT_BUF,&scancode_byte) != 0){
    KBC_IH = 1;//If there was some error, the byte read from the OB should be discarded.
  }

  KBC_IH = 0;

  util_sys_inb_call_count();

  if(SCANCODE_2B == false){
    if(scancode_byte == SCANCODE_2B_FB){
      //if it is a two byte scancode
      SCANCODE_2B = true;
      SCANCODE[0] = scancode_byte;
  }
    else
      SCANCODE[0] = scancode_byte;
  }
  else
  {
    SCANCODE[1] = scancode_byte;
    SCANCODE_2B = false;
  }
}

uint8_t kbc_read_state_field(enum kbc_state_field field) {
  uint8_t state, result;
  //get state from status register
  if (util_sys_inb(STAT_REG, &state) != 0)
    return 1;
  util_sys_inb_call_count();

  switch(field){
    case(ksf_all):
      result = state;
      break;
    case(ksf_parity):
      result = ((state & KB_SR_PARITY)>>7);
      break;
    case(ksf_timeout):
      result =((state & KB_SR_TIMEOUT)>>6);
      break;
    case(ksf_aux):
      result = ((state & KB_SR_AUX)>>5);
      break;
    case(ksf_inh):
      result = ((state & KB_SR_INH)>>4);
      break;
    case(ksf_a2):
      result = ((state & KB_SR_A2)>>3);
    case(ksf_sys):
      result = ((state & KB_SR_SYS)>>2);
      break;
    case(ksf_ibf):
      result = ((state & KB_SR_IBF)>>1);
      break;
    case(ksf_obf):
      result = (state & KB_SR_OBF);
      break;
    default:
      return 1;
  }

  return result;
}

int kbc_read_state_error(){
  //if one or both fields are set to 1 there is an error - return 1
  if(kbc_read_state_field(ksf_parity) == 1 || kbc_read_state_field(ksf_timeout) == 1)
    return 1;
  return 0;
}
